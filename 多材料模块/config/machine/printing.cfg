
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - PLEASE CUSTOMISE THE SCRIPT
gcode:
    G_HALED_PRINTING
    M117 Homing...                 ; display message
    {% set head_temp = params.EXTRUDER|default(230)|float %}
    {% set bed_temp = params.BED|default(60)|float %}
    M104 S{head_temp - 40}
    M190 S{bed_temp}
    # SAVE_VARIABLE VARIABLE=bed_temp_init VALUE={bed_temp}
    # M104 S{head_temp}
    G28
    G92 E0

    #LTdo:调平
    {% if printer.z_tilt.applied != True %} 
        Z_TILT_ADJUST
    {% endif %}
    
    ##LTdo:根据网床温度加载补偿。
    # 定义命名空间对象以跟踪变量值
    {% set ns = namespace(min_difference=99999, min_variable="null") %}
    # 循环遍历网床补偿变量
    {% for profile_name, profile_data in printer.bed_mesh.profiles.items() %}
        {% if 'bed' in profile_name %}
            { action_respond_info("chick " ~ profile_name)}
            # 获取当前变量名中的整数部分
            {% set current_number = profile_name.split("bed")[1]|int %}
            { action_respond_info("temp is " ~ current_number)}
            # 计算当前变量名的整数差值
            {% set current_difference = (current_number - bed_temp)|abs %}
            { action_respond_info("abs is " ~ current_number)}
            # 如果当前差值比最小差值小，则更新最小差值和对应的变量名
            {% if current_difference < ns.min_difference %}
                {% set ns.min_difference = current_difference %}
                {% set ns.min_variable = profile_name %}
                { action_respond_info("set min_variable = " ~ profile_name)}
            {% endif %}
        {% endif %}
    {% endfor %}
    {% if ns.min_variable == "null" %} 
        RESPOND MSG="未找到任何可用网床补偿，请测量网床补偿并根据测试时温度命名。示例：60度热床命名为 bed60，102度热床命名为 bed102等。打印时会加载最接近温度的补偿。"
    {% else %}
        { action_respond_info("加载网床补偿 " ~ ns.min_variable)}
        BED_MESH_PROFILE LOAD="{ns.min_variable}"
    {% endif %}
    # G28 Z #klipper版本太旧不能设置往网床原点，加载网床后重新做Z归零

    # NOZZLE_CLEAR EXTRUDER={head_temp}
    M104 S{head_temp}
    NOZZLE_CLEAR_INERTIA
    M104 S{head_temp} #避免温度被NOZZLE_CLEAR_INERTIA覆盖
    # SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1 #设置灯丝传感器的开/关。如果 ENABLE 设置为 0，耗材传感器将被禁用，如果设置为 1是启用。


[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z - 1]|min %}
    {% set z_pull = [th.position.z + 10, th.axis_maximum.z - 1]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                 ; retract filament
    
    M104 S{printer.extruder.target -80} #热端温度
    M140 S{printer.heater_bed.target -15} #热床温度温度
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G1 E-10 F3600                 ; 长回抽防止停机漏料
    G0 Z{z_pull} F20000  ; move nozzle to remove stringing
    # G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    G28 X Y
    M107                                     ; turn off fan
    # SET_FAN_SPEED FAN=BODY_FAN SPEED=0
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END 
    # SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0 #设置灯丝传感器的开/关。如果 ENABLE 设置为 0，耗材传感器将被禁用，如果设置为 1是启用。
    G_LED_IDLE
#[bltouch]
#sensor_pin: PD13
#control_pin: PD12

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    { action_respond_info("CANCEL_PRINT by printing.cfg") }
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    {% set z_pull = [th.position.z + 10, th.axis_maximum.z]|min %}

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                 ; retract filament

    M104 S{printer.extruder.target -80} #热端温度

    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 Z{z_pull} F20000  ; move nozzle to remove stringing
    # G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    G28 X Y
    M107                                     ; turn off fan
    # SET_FAN_SPEED FAN=BODY_FAN SPEED=0
    BED_MESH_CLEAR
    # SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0 #设置灯丝传感器的开/关。如果 ENABLE 设置为 0，耗材传感器将被禁用，如果设置为 1是启用。
    G_LED_IDLE
    CANCEL_PRINT_BASE
