[gcode_macro MULTI_VAR]
  variable_multi_extr_x: 5
  variable_multi_extr_y: -6
  variable_next_chan: ""
  variable_orig_x: "" #加载完耗材恢复位置
  variable_orig_y: ""
  variable_orig_z: ""
  variable_orig_temp: ""
  variable_orig_fan: ""
  variable_total_insert_e: 0
  variable_total_runout_e: 0
  variable_total_stop_e: 0
  variable_total_last_direction: 0
gcode:

[gcode_macro FILA_END]
description: 打印过程中的卸载通道
gcode:
  {% set new_fila_motor = printer["gcode_macro MULTI_VAR"].next_chan %}
  {% set old_load_temp = params.OLD_LOAD_TEMP|default(-273.10)|float %}
  {% set extr_x = printer["gcode_macro MULTI_VAR"].multi_extr_x %}
  {% set extr_y = printer["gcode_macro MULTI_VAR"].multi_extr_y %}
  {% set now_fila_motor = printer.save_variables.variables.current_fila_motor %}
  # safe anti-stringing move coords
  {% set th = printer.toolhead %}
  {% set orig_x = th.position.x %} #执行前位置
  {% set orig_y = th.position.y %}
  {% set orig_z = th.position.z %}
  {% set orig_temp = printer.extruder.target %}
  {% set orig_fan = printer.fan.speed %}#获取当前喷嘴风扇转速
  {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
  {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
  {% set z_safe = [th.position.z + 2, th.axis_maximum.z - 1]|min %}
  {% set z_pull = [th.position.z + 10, th.axis_maximum.z - 1]|min %}

  {% if now_fila_motor == "" %} #判断通道状态
    RESPOND MSG="FILA_END：警告！当前耗材通道已卸载或状态异常。若当前设定温度与耗材不匹配可能卡料。"
  {% endif %}"
  {% if "Printing" == printer.idle_timeout.state %} #打印时恢复擦料塔位置、喷嘴温度
    RESPOND MSG="FILA_END:orig_temp = {orig_temp}"
    SET_GCODE_VARIABLE MACRO=MULTI_VAR VARIABLE=orig_temp VALUE={orig_temp}
    SET_GCODE_VARIABLE MACRO=MULTI_VAR VARIABLE=orig_fan VALUE={orig_fan}
    SET_GCODE_VARIABLE MACRO=MULTI_VAR VARIABLE=orig_x VALUE={orig_x}
    SET_GCODE_VARIABLE MACRO=MULTI_VAR VARIABLE=orig_y VALUE={orig_y}
    SET_GCODE_VARIABLE MACRO=MULTI_VAR VARIABLE=orig_z VALUE={orig_z}
  {% endif %}
  #判断并设定挤出温度
  {% if old_load_temp <= -273 %}
    {% set parts = now_fila_motor.split('_') %} #提取最后下划线后数值
    {% set last_value = parts[-1] %}
    {% set load_temp_var = 'load_temp_chan_' ~ last_value %}
    {% set old_load_temp = printer.save_variables.variables[load_temp_var]|default(-273.14)|float %}#提取通道号对应温度
    RESPOND MSG="FILA_END：检索到{load_temp_var} = {old_load_temp} ℃"
      {% if old_load_temp <= -273 %}
        RESPOND MSG="FILA_END：通道{last_value} 耗材温度设置未保存，使用当前温度"
        {% set extruder_target = printer.extruder.target %} #获取当前目标温度
        {% if extruder_target < 200 %}
            RESPOND MSG="FILA_END：当前温度设定低于200，使用默认值load_temp_chan_default"
            {% set extruder_target = printer.save_variables.variables.load_temp_chan_default|default(230)|float %} %}
            RESPOND MSG="FILA_END：检索到 load_temp_chan_default = {load_temp_chan_default} ℃"
        {% endif %}
        {% set old_load_temp = extruder_target %} #设定挤出温度
      {% endif %}
  {% endif %}
    #判断并设定挤出速度
    {% set parts = now_fila_motor.split('_') %} #提取最后下划线后数值
    {% set last_value = parts[-1] %}
    {% set extr_speed_var = 'extr_speed_chan_' ~ last_value %}
    {% set extr_speed = printer.save_variables.variables[extr_speed_var]|default(-1)|float %}#提取通道号对应温度
    RESPOND MSG="FILA_END：检索到{extr_speed_var} = {extr_speed} mm/min"
    {% if extr_speed <= 0 %}
      RESPOND MSG="FILA_END：通道{last_value} 耗材挤出速度设置未保存，使用默认值extr_speed_chan_default"
      {% set extr_speed = printer.save_variables.variables.extr_speed_chan_default|default(1000)|float %} #设定挤出速度
      RESPOND MSG="FILA_END：检索到extr_speed_chan_default = {extr_speed} mm/min"
    {% endif %}

  SAVE_GCODE_STATE NAME=STATE_FILA_END

  RESPOND MSG="正在卸载耗材通道{now_fila_motor}"
  #安全Z轴抬升
  G91 #相对运动 #取消擦料和恢复位置，只需要抬升和下降
  G1 E-2.0 F3600
  G1 Z2 F600
  G92 E0                         ; zero the extruder
  # G1 E-2.0 F3600                 ; retract filament
  G90                                      ; absolute positioning
  M83 #相对挤出
  # G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
  M104 S{old_load_temp}
  M106 S0 #关闭风扇加速加热
  G1 X{extr_x} Y{extr_y} F30000 #移动到挤出位置
  M104 S{old_load_temp}
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={old_load_temp -1}
  G1 E1 F20 #融化耗材防止挤出不足
  G1 E40 F{extr_speed * 0.9} #原电机+头电机，挤出 #挤出速度小于最大流量
  G1 E-50 F1000 #原电机+头电机，拉细回抽
  {% for i in range(10) %} #冷却
    G1 E-10 F1000
    G1 E10 F1000
  {% endfor %}
  # G1 E-10 F300 #缓慢回抽2S冷却耗材
  G1 E-70 F1000 #抽出打印头
  # G1 E-30 F1000 #原电机+头电机，拉细回抽
  # G1 E-3 F10 #原电机+头电机，拉细回抽
  # G1 E2 F1000
  # G1 E-70 F5000 #原电机+头电机，拉断回抽。并抽离打印头
  SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE="" #解耦头挤出机，防止脉冲过密MCU超载
  # G1 E-670 F{12000 *1}
  {% for i in range(67) %} #原电机，震动回抽
    G1 E-7 F{12000 *1}
    G1 E2 F{12000 *1}
    G1 E-7 F{12000 *1}
    G1 E2 F{12000 *1}
  {% endfor %}
  SAVE_VARIABLE VARIABLE=current_fila_motor VALUE='""'
  SYNC_E_NULL
  SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder #联动头挤出机
  RESPOND MSG="完成卸载耗材通道"

  RESTORE_GCODE_STATE NAME=STATE_FILA_END

[gcode_macro FILA_START]
description: 打印过程中的加载通道
gcode:
  {% set new_fila_motor = printer["gcode_macro MULTI_VAR"].next_chan %}
  {% set new_load_temp = params.NEW_LOAD_TEMP|default(-273.13)|float %}
  {% set extr_x = printer["gcode_macro MULTI_VAR"].multi_extr_x %}
  {% set extr_y = printer["gcode_macro MULTI_VAR"].multi_extr_y %}
  {% set now_fila_motor = printer.save_variables.variables.current_fila_motor %}
  
  SET_GCODE_VARIABLE MACRO=MULTI_VAR VARIABLE=next_chan VALUE='""' #清除置起状态
  #判断加载通道
  {% if new_fila_motor == "" %}
    RESPOND MSG="FILA_START：未指定耗材，切换为一号耗材"
    {% set new_fila_motor = 'FILA_MOTOR_1' %}
  {% endif %}
  {% if new_fila_motor == now_fila_motor %}#判断通道状态
    RESPOND MSG="FILA_START：通道重复，不执行动作。"
  {% else %}
    {% if now_fila_motor != "" %}#判断通道状态
      RESPOND MSG="FILA_START：当前耗材通道未卸载，开始主动卸载当前通道。"
      FILA_END 
    {% endif %}
    #判断并设定挤出温度
    {% if new_load_temp <= -273 %}
      {% set parts = new_fila_motor.split('_') %} #提取最后下划线后数值
      {% set last_value = parts[-1] %}
      {% set load_temp_var = 'load_temp_chan_' ~ last_value %}
      {% set new_load_temp = printer.save_variables.variables[load_temp_var]|default(-273.14)|float %}#提取通道号对应温度
      RESPOND MSG="FILA_START：检索到{load_temp_var} = {new_load_temp} ℃"
        {% if new_load_temp <= -273 %}
          RESPOND MSG="FILA_START：通道{last_value} 耗材温度设置未保存，使用当前温度"
          {% set extruder_target = printer.extruder.target %} #获取当前目标温度
          {% if extruder_target < 200 %}
            RESPOND MSG="FILA_START：当前温度设定低于200，使用默认值load_temp_chan_default"
            {% set extruder_target = printer.save_variables.variables.load_temp_chan_default|default(230)|float %} %}
            RESPOND MSG="FILA_START：检索到 load_temp_chan_default = {load_temp_chan_default} ℃"
          {% endif %}
          {% set new_load_temp = extruder_target %} #设定挤出温度
        {% endif %}
    {% endif %}
    #判断并设定挤出速度
    {% set parts = new_fila_motor.split('_') %} #提取最后下划线后数值
    {% set last_value = parts[-1] %}
    {% set extr_speed_var = 'extr_speed_chan_' ~ last_value %}
    {% set extr_speed = printer.save_variables.variables[extr_speed_var]|default(-1)|float %}#提取通道号对应温度
    RESPOND MSG="FILA_START：检索到{extr_speed_var} = {extr_speed} mm/min"
    {% if extr_speed <= 0 %}
      RESPOND MSG="FILA_START：通道{last_value} 耗材挤出速度设置未保存，使用默认值extr_speed_chan_default"
      {% set extr_speed = printer.save_variables.variables.extr_speed_chan_default|default(600)|float %} #设定挤出速度
      RESPOND MSG="FILA_START：检索到extr_speed_chan_default = {extr_speed} mm/min"
    {% endif %}
    #判断并设定冲刷量
    {% set parts = now_fila_motor.split('_') %} #提取最后下划线后数值 #注意是前一耗材的通道
    {% set last_value = parts[-1] %}
    {% set scour_var = 'scour_chan_' ~ last_value %}
    {% set scour = printer.save_variables.variables[scour_var]|default(-1)|float %}#提取通道号对应冲刷量
    RESPOND MSG="FILA_START：检索到{scour_var} = {scour} mm"
    {% if scour < 0 %}
      RESPOND MSG="FILA_START：通道{last_value} 耗材冲刷量设置未保存，使用默认值scour_default"
      {% set scour = printer.save_variables.variables.scour_default|default(0)|float %} #设定冲刷量
      RESPOND MSG="FILA_START：检索到scour_default = {scour} mm"
    {% endif %}

    SAVE_GCODE_STATE NAME=STATE_FILA_START

    RESPOND MSG="加载耗材通道 {new_fila_motor}"
    G90                                      ; absolute positioning
    M83 #相对挤出
    FILA_START_TEMPER_SETOUT TEMPER={new_load_temp} #设为相对高温
    # M104 S{new_load_temp} #新耗材温度
    G1 X{extr_x} Y{extr_y} F30000 #移动到挤出位置
    SAVE_VARIABLE VARIABLE=current_fila_motor VALUE='"{ new_fila_motor }"'
    SYNC_E_NULL
    SYNC_EXTRUDER_MOTION EXTRUDER={ new_fila_motor } MOTION_QUEUE=extruder
    G1 E670 F{12000 *1}
    # {% for i in range(4) %} #新电机 ，快速送料
    #   G1 E200 F12000
    # {% endfor %}
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={new_load_temp -1}
    G1 E50 F500 #新电机+头电机，装填挤出机
    G1 E60 F1000 #新电机+头电机，装填喉管
    G4 P0 #插入等待防止klipper mcu提前两步解析瞬时命令
    M106 S0 #关闭风扇 利于耗材成堆
    M104 S{new_load_temp} #新耗材温度
    G1 E30 F{extr_speed} #新电机+头电机，挤出废料
    G1 E{scour} F{extr_speed} #新电机+头电机，挤出废料
    RESPOND MSG="加载耗材通道 {new_fila_motor} 完成"
    NOZZLE_CLEAR_INERTIA
    G91 #相对位置
    G1 Z-2 F600 #恢复高度
    FILA_START_TEMPER_RESTORE
    G90                                      ; absolute positioning
    M83 #相对挤出
    RESTORE_GCODE_STATE NAME=STATE_FILA_START # MOVE=1 MOVE_SPEED=500
  {% endif %}

[gcode_macro FILA_START_TEMPER_SETOUT]
# 设为相对高温。如果耗材目标温度大于当前目标温度，则输入耗材目标温度
gcode:
  {% set temper = params.TEMPER|float %}
  {% set extruder_target = printer.extruder.target %} #获取当前目标温度
  {% set differ = temper - extruder_target %}
  
  { action_respond_info("FILA_START_TEMPER_SETOUT: 加载温度：" ~ temper ~ "、原温度：" ~ extruder_target ~ "、温度差：" ~ differ) }
  {% if differ|abs > 50 %}
    RESPOND MSG="FILA_START_TEMPER_SETOUT：注意换料温度差较大！差值{differ}"
  {% endif %}
  #设为相对高温
  {% if temper > extruder_target %}
    { action_respond_info("FILA_START_TEMPER_SETOUT: 设置加载温度：" ~ temper) }
    M104 S{temper}
  {% endif %}

[gcode_macro FILA_START_TEMPER_RESTORE]
# 恢复换料前相应状态
gcode:
  {% set orig_x = printer["gcode_macro MULTI_VAR"].orig_x %} #执行前位置
  {% set orig_y = printer["gcode_macro MULTI_VAR"].orig_y %}
  {% set orig_z = printer["gcode_macro MULTI_VAR"].orig_z %}
  {% set orig_temp = printer["gcode_macro MULTI_VAR"].orig_temp %}
  {% set orig_fan = printer["gcode_macro MULTI_VAR"].orig_fan %}
  {% set current_state = printer.print_stats.state %}

  {% if current_state in ["printing", "paused"] and orig_fan != ""%} #打印时恢复擦料塔位置、喷嘴温度
    { action_respond_info("FILA_START_TEMPER_RESTORE: 恢复状态。温度：" ~ orig_temp ~ "、风扇：" ~ orig_fan) }
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={orig_temp|float}
    M106 S{orig_fan * 255} #恢复喷嘴风扇
    # G90
    # G1 X{orig_x|float} Y{orig_y|float} F30000 #恢复位置
    # G1 Z{orig_z|float} F600
    SET_GCODE_VARIABLE MACRO=MULTI_VAR VARIABLE=orig_temp VALUE='""'
    SET_GCODE_VARIABLE MACRO=MULTI_VAR VARIABLE=orig_fan VALUE='""'
    SET_GCODE_VARIABLE MACRO=MULTI_VAR VARIABLE=orig_x VALUE='""'
    SET_GCODE_VARIABLE MACRO=MULTI_VAR VARIABLE=orig_y VALUE='""'
    SET_GCODE_VARIABLE MACRO=MULTI_VAR VARIABLE=orig_z VALUE='""'
  {% endif %}

[gcode_macro FILAMENT_STATE_SET]
#设置当前连接的耗材通道
gcode:
  {% set now_fila_motor = params.FILAMENT_MOTOR|default('FILA_MOTOR_1')|string %}
  SAVE_VARIABLE VARIABLE=current_fila_motor VALUE='"{ now_fila_motor }"'
  SYNC_E_NULL
  SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder
  {% if now_fila_motor != "" %}
    SYNC_EXTRUDER_MOTION EXTRUDER={now_fila_motor} MOTION_QUEUE=extruder
  {% endif %}
  RESPOND MSG="置当前连接的耗材通道为{now_fila_motor}"

[gcode_macro MUITI_INIT]
#多耗材通道上电初始化
gcode:
  {% set now_fila_motor = printer.save_variables.variables.current_fila_motor %}
  FILAMENT_STATE_SET FILAMENT_MOTOR={now_fila_motor}

[gcode_macro SYNC_E_ALL]
description: Synchronize all extruders on
gcode:
  # 检查并处理主挤出机
  {% set extruder_queue = printer.configfile.settings['extruder'].motion_queue|default("") %}
  {% if extruder_queue != "extruder" %}
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder
  {% endif %}

  # 定义命名空间对象来存储符合 FILA_MOTOR_* 格式的挤出机列表
  {% set ns = namespace(fila_motors=[]) %}

  # 自动查找并处理所有符合 FILA_MOTOR_* 格式的挤出机
  {% for name in printer %}
    {% if name.startswith("extruder_stepper FILA_MOTOR_") %}
      {% set motor_queue = printer[name].motion_queue|default("") %}
      {% if motor_queue != "extruder" %}
        {% set ns.fila_motors = ns.fila_motors + [name] %}
      {% endif %}
    {% endif %}
  {% endfor %}
  # 输出查找的挤出机列表
  { action_respond_info("FILA_MOTORS found: " ~ ns.fila_motors | join(", ")) }
  # 同步所有挤出机
  {% for motor in ns.fila_motors %}
    {% set motor_queue = printer[motor].motion_queue|default("") %}
    {% if motor_queue != "extruder" %}
      SYNC_EXTRUDER_MOTION EXTRUDER={ motor.split(" ")[1] } MOTION_QUEUE=extruder
    {% endif %}
  {% endfor %}




[gcode_macro SYNC_E_NULL]
description: Synchronize all extruders off
gcode:
  # 检查并处理主挤出机
  {% set extruder_queue = printer.configfile.settings['extruder'].motion_queue|default("") %}
  {% if extruder_queue != None %}
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=""
  {% endif %}

  # 定义命名空间对象来存储变量
  {% set ns = namespace(fila_motors=[]) %}
  # 自动查找并处理所有符合 FILA_MOTOR_* 格式的挤出机
  {% for motor in printer %}
    # 仅处理名称以 'extruder_stepper' 开头的键
    {% if motor.startswith('extruder_stepper') %}
      # { action_respond_info("Found extruder_stepper: " ~ motor) }
      # 只处理 FILA_MOTOR_* 格式的挤出机
      {% if "FILA_MOTOR_" in motor %}
        {% set ns.fila_motors = ns.fila_motors + [motor] %}
      {% endif %}
    {% endif %}
  {% endfor %}
  # { action_respond_info("FILA_MOTORS found: " ~ ns.fila_motors | join(", ")) }# 输出查找的挤出机列表
  # 遍历并同步所有 FILA_MOTOR_* 挤出机的 motion_queue
  {% for motor in ns.fila_motors %}
    {% set motor_queue = printer[motor].motion_queue|default("") %}
    {% if motor_queue != None %}# 如果挤出机有运动队列，清空队列
      SYNC_EXTRUDER_MOTION EXTRUDER={ motor.split(" ")[1] } MOTION_QUEUE=""
    {% endif %}
  {% endfor %}


[gcode_macro FILA_ALIGN_ALL]
description: 
gcode:
    #按序检查传感器状态，设置第一个有耗材需要对齐的通道懂啊全局变量。
    #调用对齐宏

[gcode_macro FILA_ALIGN]
description: 耗材对齐的入口宏，关联多个延时宏。
variable_macro_chan: ""  # 通道编号
variable_macro_retries: 0  # 误差重试次数
variable_macro_iterations: 0  # 初始化迭代次数
variable_macro_step_len: 0   # 每次挤出长度（毫米）
variable_macro_total_len: 0  # 最大挤出长度（毫米）
variable_macro_speed: 0      # 挤出速度（mm/min）
variable_macro_extrusion_time: 0  # 每步挤出时间（秒）
variable_macro_cont: 0  # 是否遍历后续所有通道
gcode:
    {% set now_fila_motor = printer.save_variables.variables.current_fila_motor %}
    {% set chan = params.CHAN|default("") %}
    {% set fila_motor = "FILA_MOTOR_" ~ chan %}
    {% set retries = params.RETRIES|default(1)|int %}
    {% set step_len = params.STEP_LEN|default(50)|float %}
    {% set total_len = params.TOTAL_LEN|default(1500)|float %}
    {% set speed = params.SPEED|default(3000)|float %}
    {% set max_iterations = (total_len / step_len)|int %}
    {% set extrusion_time = (step_len / speed) * 60 %}
    {% set cont = params.CONT|default(0) %}

    
    SET_GCODE_VARIABLE MACRO=FILA_ALIGN VARIABLE=macro_chan VALUE={chan}
    SET_GCODE_VARIABLE MACRO=FILA_ALIGN VARIABLE=macro_retries VALUE={retries}
    SET_GCODE_VARIABLE MACRO=FILA_ALIGN VARIABLE=macro_step_len VALUE={step_len}
    SET_GCODE_VARIABLE MACRO=FILA_ALIGN VARIABLE=macro_total_len VALUE={total_len}
    SET_GCODE_VARIABLE MACRO=FILA_ALIGN VARIABLE=macro_speed VALUE={speed}
    SET_GCODE_VARIABLE MACRO=FILA_ALIGN VARIABLE=macro_iterations VALUE={max_iterations}
    SET_GCODE_VARIABLE MACRO=FILA_ALIGN VARIABLE=macro_extrusion_time VALUE={extrusion_time}
    SET_GCODE_VARIABLE MACRO=FILA_ALIGN VARIABLE=macro_cont VALUE={cont}

    #获取通道传感器状态
    {% set sensor_name = "filament_switch_sensor chan_over_sensor_" ~ chan %}
    {% set sensor_triggered = True %}
    {% if printer.configfile.settings[sensor_name] is defined %}
        {% set sensor_triggered = printer[sensor_name].filament_detected %}
    {% endif %}

    {% if now_fila_motor != "" or "PRESSED" == printer["gcode_button TOTAL_FILA_BUTTON"].state %}
        RESPOND MSG="FILA_ALIGN: 若要执行对齐通道，请先清空主通道，并等待设备空闲。"
    {% elif not sensor_triggered %}
        RESPOND MSG="FILA_ALIGN: 未识别到通道{chan}的耗材插入。"
    {% else %}
        SAVE_VARIABLE VARIABLE=current_fila_motor VALUE='"{ fila_motor }"'
        SYNC_E_NULL
        SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder
        SYNC_EXTRUDER_MOTION EXTRUDER={ fila_motor } MOTION_QUEUE=extruder
        FILA_ALIGN_START
    {% endif %}

    

    #检查当前通道状态，如果主通道未清理则提示
    #如果主通道干净则，并且主通道差u你敢其未触发，则调用起始宏。

[gcode_macro FILA_ALIGN_START]
description: "Start filament loading and handle extrusion steps"
gcode:
    {% set iterations = printer["gcode_macro FILA_ALIGN"].macro_iterations|default(0) %}
    {% set step_len = printer["gcode_macro FILA_ALIGN"].macro_step_len|default(0) %}
    {% set speed = printer["gcode_macro FILA_ALIGN"].macro_speed|default(0) %}
    {% set extrusion_time = printer["gcode_macro FILA_ALIGN"].macro_extrusion_time|default(0) %}
    
    # 赋值传参给宏变量
    
    { action_respond_info("FILA_ALIGN: 开始加载耗材") }

    # 检查传感器状态
    {% if  "PRESSED" == printer["gcode_button TOTAL_FILA_BUTTON"].state %}
        { action_respond_info("FILA_ALIGN_START: 主通道检测到耗材，停止加载") }
    {% else %}
        M83
        G1 E{step_len} F{speed}
        # { action_respond_info("FILA_ALIGN: 执行一次挤出操作") }
        UPDATE_DELAYED_GCODE ID=FILA_ALIGN_LOOP DURATION={extrusion_time}
    {% endif %}

[delayed_gcode FILA_ALIGN_LOOP]
gcode:
    {% set chan = printer["gcode_macro FILA_ALIGN"].macro_chan %}
    {% set iterations = printer["gcode_macro FILA_ALIGN"].macro_iterations|default(0) %}
    {% set step_len = printer["gcode_macro FILA_ALIGN"].macro_step_len|default(0) %}
    {% set speed = printer["gcode_macro FILA_ALIGN"].macro_speed|default(0) %}
    {% set extrusion_time = printer["gcode_macro FILA_ALIGN"].macro_extrusion_time|default(0) %}
    {% set insert_e = printer["gcode_macro MULTI_VAR"].total_insert_e %}
    # RESPOND MSG="FILA_ALIGN_LOOP: 当前迭代次数: {iterations}"
    # 更新剩余迭代次数
    SET_GCODE_VARIABLE MACRO=FILA_ALIGN VARIABLE=macro_iterations VALUE={iterations-1}

    #判断通道传感器状态
    {% set sensor_name = "filament_switch_sensor chan_over_sensor_" ~ chan %}
    {% set sensor_triggered = True %}
    {% if printer.configfile.settings[sensor_name] is defined %}
        {% set sensor_triggered = printer[sensor_name].filament_detected %}
    {% endif %}

    {% if not sensor_triggered %}
        RESPOND MSG="FILA_ALIGN_LOOP: 通道{chan}传感器未检测到耗材，停止送料。"
        SET_GCODE_VARIABLE MACRO=FILA_ALIGN VARIABLE=macro_iterations VALUE=0
    {% elif "PRESSED" == printer["gcode_button TOTAL_FILA_BUTTON"].state %}#检测到耗材
        SET_GCODE_VARIABLE MACRO=FILA_ALIGN VARIABLE=macro_iterations VALUE=0
        RESPOND MSG="FILA_ALIGN_LOOP: 已检测到耗材，停止循环"
        {% set pos = printer.gcode_move.position %} #保存最后运动坐标
        SET_GCODE_VARIABLE MACRO=MULTI_VAR VARIABLE=total_stop_e VALUE={pos.e}
        { action_respond_info("FILA_ALIGN_LOOP: 耗材停止移动坐标 E" ~ pos.e) }
        {% set back_e = pos.e - insert_e%}
        M83
        G1 E-{back_e *0.8} F{speed}
        G1 E-{back_e *0.4} F1200
        G1 E-150 F{speed}
        {% set time = ((back_e *0.8 / speed)|abs + (back_e *0.4 /1200)|abs + (150 / speed)|abs) * 60 %}
        { action_respond_info("FILA_ALIGN_LOOP:time " ~ time) }
        UPDATE_DELAYED_GCODE ID=FILA_ALIGN_BACK DURATION={time}
    {% else %}#未检测到耗材
        {% if iterations > 0 %}
            M83
            G1 E{step_len} F{speed}
            # { action_respond_info("FILA_ALIGN_LOOP: 执行挤出: 长度=" ~ step_len ~ "mm，速度=" ~ speed ~ "mm/min") }
            UPDATE_DELAYED_GCODE ID=FILA_ALIGN_LOOP DURATION={extrusion_time}
        {% else %}
            SET_GCODE_VARIABLE MACRO=FILA_ALIGN VARIABLE=macro_iterations VALUE=0
            RESPOND MSG="FILA_ALIGN_LOOP: 达到最大挤出长度，未检测到耗材！"
        {% endif %}
    {% endif %}

[delayed_gcode FILA_ALIGN_BACK]
gcode:
    {% set chan = printer["gcode_macro FILA_ALIGN"].macro_chan %}
    {% set now_fila_motor = printer.save_variables.variables.current_fila_motor %}
    {% set step_len = printer["gcode_macro FILA_ALIGN"].macro_step_len|default(0) %}
    {% set speed = printer["gcode_macro FILA_ALIGN"].macro_speed|default(0) %}
    {% set insert_e = printer["gcode_macro MULTI_VAR"].total_insert_e %}
    {% set runout_e = printer["gcode_macro MULTI_VAR"].total_runout_e %}
    {% set stop_e = printer["gcode_macro MULTI_VAR"].total_stop_e %}
    {% set differ_e = insert_e - runout_e%}
    {% set pos = printer.gcode_move.position %}
    {% set back_e = runout_e - pos.e%}
    {% set retries = printer["gcode_macro FILA_ALIGN"].macro_retries %}
    {% set cont = printer["gcode_macro FILA_ALIGN"].macro_cont %}

    { action_respond_info("FILA_ALIGN_BACK: 开始回退对齐") }
    
    {% if differ_e > 10 or "PRESSED" == printer["gcode_button TOTAL_FILA_BUTTON"].state %}
        {% if retries >= 1 %}
            { action_respond_info("FILA_ALIGN_BACK: 耗材对齐误差过大，剩余重试次数：" ~ retries) }
            {% set retries = retries -1 %}
            FILA_ALIGN CHAN={chan} RETRIES={retries} TOTAL_LEN=500 SPEED={speed * 0.5} 
        {% else %}
            { action_respond_info("FILA_ALIGN_BACK: 耗材对齐失败，请手动检查！") }
        {% endif %}
    {% else %}
        M83
        G1 E{back_e -200} F{speed} #数值为对齐点到传感器距离
        RESPOND MSG="FILA_ALIGN_BACK: {now_fila_motor}耗材对齐完成"
        SAVE_VARIABLE VARIABLE=current_fila_motor VALUE='""'
        SYNC_E_NULL
        SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder
        { action_respond_info("FILA_ALIGN_BACK: cont=" ~ cont) }
        {% if cont > 0 %}
            {% set parts = now_fila_motor.split('_') %}  # 按照下划线分割字符串
            {% set now_chan = parts[-1] | int %}  # 提取通道号
            {% set ns = namespace(nest_fila_motor = "") %}

            {% for i in range(now_chan + 1, 66) %}  # 假设通道最多到65
                {% if ns.nest_fila_motor != "" %}
                   #空步
                {% else %}
                    {% set sensor_name = "filament_switch_sensor chan_over_sensor_" ~ i %}
                    {% if printer.configfile.settings[sensor_name] is defined %}
                        {% set sensor_triggered = printer[sensor_name].filament_detected %}
                        {% if sensor_triggered %}
                            RESPOND MSG="FILA_ALIGN_BACK: 检测到通道 {i} 的传感器已触发"
                            {% set ns.nest_fila_motor = i %}
                        {% else %}
                            { action_respond_info("FILA_ALIGN_BACK: 通道 {i} 的传感器未触发，继续查找下一个通道") }
                        {% endif %}
                    {% endif %}
                {% endif %}
            {% endfor %}

            {% if ns.nest_fila_motor != "" %}
                # { action_respond_info("FILA_ALIGN_BACK: ns.nest_fila_motor=" ~ ns.nest_fila_motor) }
                FILA_ALIGN CHAN={ns.nest_fila_motor} CONT=1
            {% else %}
                RESPOND MSG="FILA_ALIGN_BACK: 对齐耗材遍历完成"
                SET_GCODE_VARIABLE MACRO=FILA_ALIGN VARIABLE=macro_cont VALUE='0'
            {% endif %}
        {% endif %}
    {% endif %}
    

